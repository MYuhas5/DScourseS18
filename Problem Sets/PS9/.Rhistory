((.03^0)*(2.71828^(0)))/1
((.03^0)*(2.71828^(0)))/1
((.03^0)*(2.71828^(0)))/1
((.03^0)*(2.71828^(0)))/1
((.03^0)*(2.71828^(-.03)))/1
help(integrate)
integrate()
integrate(a(2-y), lower = 0, upper = 1)
integrate(a*(2-y), lower = 0, upper = 1)
a=n/a
a=N/A
integrate((2-y), lower = 0, upper = 1)
y=0
integrate((2-y), lower = 0, upper = 1)
integrate((2-x), lower = 0, upper = 1)
2/3(2*(.4)-((.4^2)/2))
2/3(2*(.4)-(.4^2)/2)
2/3*(2*(.4)-(.4^2)/2)
5*3600
?pnorm
1 - pnorm(45, mean = 50, sd = 3.2)
pnorm(55, mean = 50, sd = 3.2)
dnorm(51:52, mean = 50, sd = 3.2)
sum(dnorm(51:52, mean = 50, sd = 3.2))
pnorm(52, mean = 50, sd = 3.2) - pnorm(51, mean = 50, sd = 3.2)
pnorm(700, mean = 605, sd = 185) - pnorm(500, mean = 605, sd = 185)
pnorm(500, mean = 605, sd = 185) - pnorm(400, mean = 605, sd = 185)
pnorm(850, mean = 605, sd = 185)
1-pnorm(1000, mean = 605, sd = 185)
qnorm(.9, mean = 605, sd = 185)
dird = "C:\\Users\\MJYuh\\Documents\\OU_2017-2018\\Fall 2017\\MATH 4753\\Lab 11"
setwd(dird)
getwd()
dird = "C:\\Users\\MJYuh\\Documents\\OU_2017-2018\\Fall 2017\\MATH 4753\\Lab 11"
setwd(dird)
setwd(dird)
dird = "C:\\Users\\MJYuh\\Documents\\OU_2017-2018\\Fall 2017\\MATH 4753\\Lab 11"
setwd(dird)
getwd()
knitr::opts_chunk$set(echo = TRUE)
set.seed(123456)
x = sample(1:6, 1000, replace = TRUE)
y = sample(1:6, 1000, replace = TRUE)
z = x + y
set.seed(123456)
x = sample(1:6, 1000, replace = TRUE)
y = sample(1:6, 1000, replace = TRUE)
z = x + y
hist(z)
?if
asd
?if()
q = sum(z == 7)
q/1000
prob = q/1000
prob = q/length(z)
prob
mu = sum(x)/length(x)
variance = sum((x - mu)^2)/length(x)
variance
sd = sqrt(variance)
sd = sqrt(variance)
sd
library(moments)
skewness(x)
set.seed(123456)
x = rnorm(100)
mu = sum(x)/length(x)
mu
variance = sum((x - mu)^2)/length(x)
variance
sd = sqrt(variance)
sd
library(moments)
skewness(x)
third.moment.var = (x-mu)^3
numerator = mean(third.moment.var)
denominator = sd*variance
numerator/denominator
skew.val = numerator/denominator
fourth.moment.var = (x-mu)^4
num.kurt = mean(fourth.moment.var)
denom.kurt = variance*variance
num.kurt = mean(fourth.moment.var)
kurtosis.val = num.kurt/denom.kurt
kurtosis.val
jb.1 = (skew.val^2)/(6/n)
n = length(x)
jb.1 = (skew.val^2)/(6/n)
jb.1 = (skew.val^2)/(6/n)
jb.2 = ((kurtosis.val - 3)^2)/(24/n)
jb = jb.1+jb.2
n = length(x)
jb.1 = (skew.val^2)/(6/n)
jb.2 = ((kurtosis.val - 3)^2)/(24/n)
jb = jb.1+jb.2
jb
qchisq(.99, df = 2)
pchisq(jb, df = 2)
1-pchisq(jb, df = 2)
install.packages(xm12)
install.packages('xm12')
install.packages(c("backports", "curl", "digest", "knitr", "lazyeval", "quantmod", "Rcpp", "RCurl", "reshape2", "rlang", "rmarkdown", "rprojroot", "s20x", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "tibble", "TTR", "xts", "yaml", "zoo"))
install.packages("'xm12'")
install.packages("installr");library(installr)
updateR()
install.packages('xm12')
install.packages('xm12')
install.packages('xml2')
install.packages('tidyverse')
install.packages('rvest')
library(rvest)
library(xml2)
library(rvest)
knitr::opts_chunk$set(echo = TRUE)
titanic = read.csv("titanic.csv")
dird = "C:\\Users\\MJYuh\\Documents\\OU 2017-2018\\Spring 2018\\ECON 5043\\HW 1"
setwd(dird)
set.seed(123456)
titanic = read.csv("titanic.csv")
tit_table = table(titanic$Survived, titanic$Pclass)
tit_table
prop.table(tit_table)
addmargins(prop.table(tit_table))
library(vcd)
install.packages("vcd")
library(vcd)
mosaic(tit_table, shade = TRUE, legend = TRUE)
prop.table(tit_table)
mosaic(tit_table, shade = TRUE, legend = TRUE)
prop.table(tit_table)
mosaic(tit_table, shade=TRUE, legend=TRUE)
tbl = structable(tit_table)
mosaic(tit_table, shade=TRUE, legend=TRUE)
mosaic(tbl), shade=TRUE, legend=TRUE)
mosaic(tbl, shade=TRUE, legend=TRUE)
tit_table
addmargins(prop.table(tit_table))
addmargins(prop.table(tit_table))
0.242424+0.20650954
addmargins(prop.table(tit_table))
0.15263749+0.09764310
x = c(70,75,80)
y = c(30,32,34)
w = 100*x + 200 *y
70*100 + 30*200
knitr::opts_chunk$set(echo = TRUE)
dird = "C:\\Users\\MJYuh\\Documents\\OU 2017-2018\\Spring 2018\\ECON 5043\\HW 1"
setwd(dird)
set.seed(123456)
titanic = read.csv("titanic.csv")
library(vcd)
tit_table = table(titanic$Survived, titanic$Pclass)
tit_table
addmargins(prop.table(tit_table))
mosaic(tbl, shade=TRUE, legend=TRUE)
addmargins(prop.table(tit_table))
0.15263749+0.09764310
x = c(70,75,80)
y = c(30,32,34)
w = 100*x + 200 *y
tbl = structable(tit_table)
library(rvest)
library(xml2)
library(rvest)
webpage <- read_html("https://www.nytimes.com/interactive/2017/06/23/opinion/trumps-lies.html")
webpage
install.packages("dplyr")
install.packages("magrittr")
install.packages("stringr")
install.packages("readr")
library(xml2)
library(rvest)
webpage <- read_html("https://www.privateislandsonline.com/search?availability=sale&region=&q2=&type%5Bprivate_island%5D=1&q=&lifestyles%5Bocean_island%5D=1&price_range=0%3A50000000&size_range=0%3A1000&view%5Bmap%5D=0")
webpage
results = html_nodes(webpage, ".short-desc")
results
name = html_nodes(webpage, ".list-name a")
name
webpage = read_html("https://www.privateislandsonline.com/search?availability=sale&region=&q2=&type%5Bprivate_island%5D=1&q=&lifestyles%5Bocean_island%5D=1&price_range=0%3A50000000&size_range=0%3A1000&view%5Bmap%5D=0")
webpage
name = html_nodes(webpage, ".list-name a")
name
name = html_nodes(webpage, ".list-name")
name
price = html_nodes(webpage, ".list-price")
size = html_nodes(webpage, ".text-center")
name = html_nodes(webpage, ".list-name")
price = html_nodes(webpage, ".list-price")
webpage = read_html("https://www.privateislandsonline.com/search?availability=sale&region=&q2=&type%5Bprivate_island%5D=1&q=&lifestyles%5Bocean_island%5D=1&price_range=0%3A50000000&size_range=0%3A1000&view%5Bmap%5D=0")
name = html_nodes(webpage, ".list-name")
price = html_nodes(webpage, ".list-price")
size = html_nodes(webpage, ".text-center")
webpage = read_html("https://www.privateislandsonline.com/search?availability=sale")
name = html_nodes(webpage, ".list-name")
price = html_nodes(webpage, ".list-price")
size = html_nodes(webpage, "#images .text-center")
place = html_nodes(webpage, ".list-name")
name = html_nodes(webpage, ".name")
name
install.packages("RSelenium")
library(RSelenium)
library(rvest)
checkForServer()
startServer()
webpage = read_html("https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees")
library(xml2)
library(rvest)
webpage = read_html("https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees")
year = html_nodes(webpage, ".jquery-tablesorter:nth-child(11) td")
artist = html_nodes(webpage, "td~ td+ td .fn a")
indutor = html_nodes(webpage, "#images .text-center")
inductor = html_nodes(webpage, "p+ .jquery-tablesorter a")
artist = html_nodes(webpage, "td~ td+ td .fn a")
inductor = html_nodes(webpage, "p+ .jquery-tablesorter a")
webpage = read_html("https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees")
year = html_nodes(webpage, ".jquery-tablesorter:nth-child(11) td")
artist = html_nodes(webpage, "td~ td+ td .fn a")
inductor = html_nodes(webpage, "p+ .jquery-tablesorter a")
year = html_nodes(webpage, ".jquery-tablesorter")
year = html_nodes(webpage, ".jquery-tablesorter:nth-child(11) td:nth-child(1)")
table = html_table(html_nodes(webpage, xpath='//*[@id="mw-content-text"]/div/table[1]'))
table
head(table)
table = html_nodes(webpage, xpath='//*[@id="mw-content-text"]/div/table[1]')
head(table)
library(magrittr)
table = webpage %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
head(table)
table = table[1]
head(table)
table = webpage %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
head(table)
library(xml2)
library(rvest)
library(magrittr)
webpage = read_html("https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees")
table = webpage %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
url = "https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees"
table = url %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
table = table[1]
head(table)
table
table = url %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
table = url %>% read_html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
head(table)
table = table[1]
head(table)
table = url %>% read_html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
data = table[1]
install.packages("XML")
library(XML)
url = "https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees"
readHTMLTable(url, which=1)
library(rvest)
library(xml2)
library(rvest)
url = "https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees"
readHTMLTable(url, which=1)
knitr::opts_chunk$set(echo = TRUE)
dird = "C:\\Users\\MJYuh\\Documents\\OU 2017-2018\\Spring 2018\\ECON 5043\\HW 3"
dird = "C:\\Users\\MJYuh\\Documents\\OU 2017-2018\\Spring 2018\\ECON 5043\\HW 3"
setwd(dird)
set.seed(123456)
titanic = read.csv("titanic.csv")
head(titanic)
summary(titanic)
ti_table = table(Survived = titanic$Survived, Sex = titanic$Sex, Class = titanic$Pclass)
ti_joint = prop.table(ti_table)
ti_joint
ti_margin = addmargins(prop.table(ti_joint))
ti_margin
ptheta.15 = 0.3
ptheta.25 = 0.2
ptheta.5 = 0.3
ptheta.75 = 0.2
p_t.15 = ptheta.15^9*(1-ptheta.15)^3
p_t.25 = ptheta.25^9*(1-ptheta.25)^3
p_t.15 = ptheta.5^9*(1-ptheta.5)^3
p_t.15 = ptheta.75^9*(1-ptheta.75)^3
p_t.15
p_t.25
p_t.5
p_t.15 = ptheta.15^9*(1-ptheta.15)^3
p_t.25 = ptheta.25^9*(1-ptheta.25)^3
p_t.5 = ptheta.5^9*(1-ptheta.5)^3
p_t.15 = ptheta.75^9*(1-ptheta.75)^3
p_t.15
p_t.25
p_t.5
p_t.75
p_t.15 = ptheta.15^9*(1-ptheta.15)^3
p_t.25 = ptheta.25^9*(1-ptheta.25)^3
p_t.5 = ptheta.5^9*(1-ptheta.5)^3
p_t.75 = ptheta.75^9*(1-ptheta.75)^3
p_t.15
p_t.25
p_t.5
p_t.75
f.x1 = p_t.15*.3
f.x2 = p_t.25*.2
f.x3 = p_t.5*.3
f.x4 = p_t.75*.2
f.x = f.x1+f.x2+f.x3+f.x4
list(f.x1, f.x2, f.x3, f.x4, f.x)
a = f.x1/f.x
b = f.x2/f.x
c = f.x3/f.x
d = f.x4/f.x
list(a,b,c,d)
sum(a,b,c,d)
sum(a,b,c,d)
a = f.x1/f.x
b = f.x2/f.x
c = f.x3/f.x
d = f.x4/f.x
list(a,b,c,d)
sum(a,b,c,d)
x =c(1,4,6)
y=c(2,3)
match(x,y)
install.packages("glmnet")
install.packages(mlr)
install.packages("mlr")
dird = "C://Users//MJYuh//DScourseS18//Problem Sets//PS9"
setwd(dird)
housing <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data")
names(housing) <- c("crim","zn","indus","chas","nox","rm","age","dis","rad","tax","ptratio","b","lstat","medv")
housing $ lmedv <- log( housing $ medv )
housing $ medv <- NULL # drop median value
formula <- as.formula( lmedv ~ .^3 +
poly (crim , 6) +
poly (zn , 6) +
poly (indus , 6) +
poly (nox , 6) +
poly (rm , 6) +
poly (age , 6) +
poly (dis , 6) +
poly (rad , 6) +
poly (tax , 6) +
poly ( ptratio , 6) +
poly (b, 6) +
poly (lstat , 6))
mod_matrix <- data.frame(model.matrix( formula , housing ))
mod_matrix[, 1] = housing$lmedv
colnames(mod_matrix)[1] = " lmedv " # make sure to rename it otherwise MLR won't find it
head(mod_matrix) # just make sure everything is hunky - dory
n <- nrow ( mod_matrix )
train <- sample (n, size = .8*n)
test <- setdiff (1:n, train )
housing.train <- mod_matrix[train ,]
housing.test <- mod_matrix[test , ]
library(mlr)
library(glmnet)
library(ParamHelpers)
library(glmnet)
library(mlr)
predAlg <- makeLearner("regr.glmnet")
modelParams <- makeParamSet(makeNumericParam("lambda",lower=0,upper=1),makeNumericParam("alpha",lower=1,upper=1))
tuneMethod <- makeTuneControlRandom(maxit = 50L)
tunedModel <- tuneParams(learner = predAlg,
task = theTask,
resampling = resampleStrat,
measures = rmse,       # RMSE performance measure, this can be changed to one or many
par.set = modelParams,
control = tuneMethod,
show.info = TRUE)
theTask <- makeRegrTask(id = "taskname", data = housing.train, target = "lmedv")
n <- nrow ( mod_matrix )
train <- sample (n, size = .8*n)
test <- setdiff (1:n, train )
housing.train <- mod_matrix[train ,]
housing.test <- mod_matrix[test , ]
predAlg <- makeLearner("regr.glmnet")
modelParams <- makeParamSet(makeNumericParam("lambda",lower=0,upper=1),makeNumericParam("alpha",lower=1,upper=1))
tuneMethod <- makeTuneControlRandom(maxit = 50L)
theTask <- makeRegrTask(id = "taskname", data = housing.train, target = "lmedv")
housing <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data")
names(housing) <- c("crim","zn","indus","chas","nox","rm","age","dis","rad","tax","ptratio","b","lstat","medv")
housing $ lmedv <- log( housing $ medv )
housing $ medv <- NULL # drop median value
formula <- as.formula( lmedv ~ .^3 +
poly (crim , 6) +
poly (zn , 6) +
poly (indus , 6) +
poly (nox , 6) +
poly (rm , 6) +
poly (age , 6) +
poly (dis , 6) +
poly (rad , 6) +
poly (tax , 6) +
poly ( ptratio , 6) +
poly (b, 6) +
poly (lstat , 6))
mod_matrix <- data.frame(model.matrix( formula , housing ))
mod_matrix[, 1] = housing$lmedv
colnames(mod_matrix)[1] = " lmedv " # make sure to rename it otherwise MLR won't find it
head(mod_matrix) # just make sure everything is hunky - dory
n <- nrow ( mod_matrix )
train <- sample (n, size = .8*n)
test <- setdiff (1:n, train )
housing.train <- mod_matrix[train ,]
housing.test <- mod_matrix[test , ]
predAlg <- makeLearner("regr.glmnet")
modelParams <- makeParamSet(makeNumericParam("lambda",lower=0,upper=1),makeNumericParam("alpha",lower=1,upper=1))
tuneMethod <- makeTuneControlRandom(maxit = 50L)
tunedModel <- tuneParams(learner = predAlg,
task = theTask,
resampling = resampleStrat,
measures = rmse,       # RMSE performance measure, this can be changed to one or many
par.set = modelParams,
control = tuneMethod,
show.info = TRUE)
housing.train <- mod_matrix[train,]
tuneMethod <- makeTuneControlRandom(maxit = 50L)
print(theTask)
theTask <- makeRegrTask(id = "taskname", data = housing.train, target = "lmedv")
theTask <- makeRegrTask(id = "taskname", data = 'housing.train', target = "lmedv")
theTask <- makeRegrTask(id = "taskname", data = housing.train, target = "lmedv")
resampleStrat <- makeResampleDesc(method = "CV", iters = 6)
housing$lmedv <- log( housing $ medv )
housing$medv <- NULL # drop median value
formula <- as.formula( lmedv ~ .^3 +
poly (crim , 6) +
poly (zn , 6) +
poly (indus , 6) +
poly (nox , 6) +
poly (rm , 6) +
poly (age , 6) +
poly (dis , 6) +
poly (rad , 6) +
poly (tax , 6) +
poly ( ptratio , 6) +
poly (b, 6) +
poly (lstat , 6))
mod_matrix <- data.frame(model.matrix(formula , housing))
mod_matrix[, 1] = housing$lmedv
colnames(mod_matrix)[1] = " lmedv " # make sure to rename it otherwise MLR won't find it
head(mod_matrix) # just make sure everything is hunky - dory
n <- nrow ( mod_matrix )
train <- sample (n, size = .8*n)
test <- setdiff (1:n, train )
housing.train <- mod_matrix[train,]
housing.test <- mod_matrix[test,]
predAlg <- makeLearner("regr.glmnet")
modelParams <- makeParamSet(makeNumericParam("lambda",lower=0,upper=1),makeNumericParam("alpha",lower=1,upper=1))
tuneMethod <- makeTuneControlRandom(maxit = 50L)
theTask <- makeRegrTask(id = "taskname", data = housing.train, target = "lmedv")
n <- nrow( mod_matrix )
train <- sample(n, size = .8*n)
test <- setdiff(1:n, train )
housing.train <- mod_matrix[train,]
housing.test <- mod_matrix[test,]
predAlg <- makeLearner("regr.glmnet")
modelParams <- makeParamSet(makeNumericParam("lambda",lower=0,upper=1),makeNumericParam("alpha",lower=1,upper=1))
tuneMethod <- makeTuneControlRandom(maxit = 50L)
theTask <- makeRegrTask(id = "taskname", data = housing.train, target = "lmedv")
mod_matrix <- data.frame(model.matrix(formula, housing))
formula <- as.formula( lmedv ~ .^3 +
poly (crim, 6) +
poly (zn, 6) +
poly (indus, 6) +
poly (nox, 6) +
poly (rm, 6) +
poly (age, 6) +
poly (dis, 6) +
poly (rad, 6) +
poly (tax, 6) +
poly ( ptratio , 6) +
poly (b, 6) +
poly (lstat, 6))
mod_matrix <- data.frame(model.matrix(formula, housing))
mod_matrix[, 1] = housing$lmedv
colnames(mod_matrix)[1] = " lmedv " # make sure to rename it otherwise MLR won't find it
n <- nrow(mod_matrix)
head(mod_matrix) # just make sure everything is hunky - dory
train <- sample(n, size = .8*n)
test <- setdiff(1:n, train)
housing.train <- mod_matrix[train,]
housing.test <- mod_matrix[test,]
predAlg <- makeLearner("regr.glmnet")
modelParams <- makeParamSet(makeNumericParam("lambda",lower=0,upper=1),makeNumericParam("alpha",lower=1,upper=1))
tuneMethod <- makeTuneControlRandom(maxit = 50L)
theTask <- makeRegrTask(id = "taskname", data = housing.train, target = "lmedv")
print(theTask)
View(housing.train)
tunedModel <- tuneParams(learner = predAlg,
task = theTask,
resampling = resampleStrat,
measures = rmse,       # RMSE performance measure, this can be changed to one or many
par.set = modelParams,
control = tuneMethod,
show.info = TRUE)
predAlg <- setHyperPars(learner=predAlg, par.vals = tunedModel$x)
resample(predAlg,theTask,resampleStrat,measures=list(rmse))
finalModel <- train(learner = predAlg, task = theTask)
prediction <- predict(finalModel, newdata = housing.test)
print(head(prediction$data))
