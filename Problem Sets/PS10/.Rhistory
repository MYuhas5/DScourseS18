.17*(0-4.655)^2+.10*(1-4.655)^2+.11*(2-4.655)^2+.11*(3-4.655)^2+.10*(4-4.655)^2+.10*(5-4.655)^2+
.07*(6-4.655)^2+.05*(7-4.655)^2+.03*(8-4.655)^2+.02*(9-4.655)^2+.02*(10-4.655)^2+.02*(11-4.655)^2+
.02*(12-4.655)^2+.02*(13-4.655)^2+.01*(14-4.655)^2+.01*(15-4.655)^2+.01*(16-4.655)^2+
.01*(17-4.655)^2+.01*(18-4.655)^2+.005*(19-4.655)^2+.005*(20-4.655)^2
sqrt(19.85597)
4.655+4.456
4.655-4.456
?dbinom
dbinom(x = 10, size = 25, p=.7)
pbinom(5, size = 25, p = .7)
25*.7
25*.7*.3
sqrt(5.25)
2.291*2
17.5+4.582
17.5-4.582
?dmultinom
factorial(50)/(factorial(5))*((.1)^5)^10
dmultinom(x=c(5,5,5,5,5,5,5,5,5,5), size = 50, prob = c(.1,.1,.1,.1,.1,.1,.1,.1,.1,.1))
pbinom(1,size = 50, prob = .1)
1/.6
1/.6
1/.4
.4*.6^(1-1)
1-(.4 + .4*.6^(2-1))
(10*8)/209
(choose(8,4)*choose(201, 6))/choose(209,10)
((.03^0)*(2.71828^(0)))/1
((.03^0)*(2.71828^(0)))/1
((.03^0)*(2.71828^(0)))/1
((.03^0)*(2.71828^(0)))/1
((.03^0)*(2.71828^(-.03)))/1
help(integrate)
integrate()
integrate(a(2-y), lower = 0, upper = 1)
integrate(a*(2-y), lower = 0, upper = 1)
a=n/a
a=N/A
integrate((2-y), lower = 0, upper = 1)
y=0
integrate((2-y), lower = 0, upper = 1)
integrate((2-x), lower = 0, upper = 1)
2/3(2*(.4)-((.4^2)/2))
2/3(2*(.4)-(.4^2)/2)
2/3*(2*(.4)-(.4^2)/2)
5*3600
?pnorm
1 - pnorm(45, mean = 50, sd = 3.2)
pnorm(55, mean = 50, sd = 3.2)
dnorm(51:52, mean = 50, sd = 3.2)
sum(dnorm(51:52, mean = 50, sd = 3.2))
pnorm(52, mean = 50, sd = 3.2) - pnorm(51, mean = 50, sd = 3.2)
pnorm(700, mean = 605, sd = 185) - pnorm(500, mean = 605, sd = 185)
pnorm(500, mean = 605, sd = 185) - pnorm(400, mean = 605, sd = 185)
pnorm(850, mean = 605, sd = 185)
1-pnorm(1000, mean = 605, sd = 185)
qnorm(.9, mean = 605, sd = 185)
dird = "C:\\Users\\MJYuh\\Documents\\OU_2017-2018\\Fall 2017\\MATH 4753\\Lab 11"
setwd(dird)
getwd()
dird = "C:\\Users\\MJYuh\\Documents\\OU_2017-2018\\Fall 2017\\MATH 4753\\Lab 11"
setwd(dird)
setwd(dird)
dird = "C:\\Users\\MJYuh\\Documents\\OU_2017-2018\\Fall 2017\\MATH 4753\\Lab 11"
setwd(dird)
getwd()
knitr::opts_chunk$set(echo = TRUE)
set.seed(123456)
x = sample(1:6, 1000, replace = TRUE)
y = sample(1:6, 1000, replace = TRUE)
z = x + y
set.seed(123456)
x = sample(1:6, 1000, replace = TRUE)
y = sample(1:6, 1000, replace = TRUE)
z = x + y
hist(z)
?if
asd
?if()
q = sum(z == 7)
q/1000
prob = q/1000
prob = q/length(z)
prob
mu = sum(x)/length(x)
variance = sum((x - mu)^2)/length(x)
variance
sd = sqrt(variance)
sd = sqrt(variance)
sd
library(moments)
skewness(x)
set.seed(123456)
x = rnorm(100)
mu = sum(x)/length(x)
mu
variance = sum((x - mu)^2)/length(x)
variance
sd = sqrt(variance)
sd
library(moments)
skewness(x)
third.moment.var = (x-mu)^3
numerator = mean(third.moment.var)
denominator = sd*variance
numerator/denominator
skew.val = numerator/denominator
fourth.moment.var = (x-mu)^4
num.kurt = mean(fourth.moment.var)
denom.kurt = variance*variance
num.kurt = mean(fourth.moment.var)
kurtosis.val = num.kurt/denom.kurt
kurtosis.val
jb.1 = (skew.val^2)/(6/n)
n = length(x)
jb.1 = (skew.val^2)/(6/n)
jb.1 = (skew.val^2)/(6/n)
jb.2 = ((kurtosis.val - 3)^2)/(24/n)
jb = jb.1+jb.2
n = length(x)
jb.1 = (skew.val^2)/(6/n)
jb.2 = ((kurtosis.val - 3)^2)/(24/n)
jb = jb.1+jb.2
jb
qchisq(.99, df = 2)
pchisq(jb, df = 2)
1-pchisq(jb, df = 2)
install.packages(xm12)
install.packages('xm12')
install.packages(c("backports", "curl", "digest", "knitr", "lazyeval", "quantmod", "Rcpp", "RCurl", "reshape2", "rlang", "rmarkdown", "rprojroot", "s20x", "spatstat", "spatstat.data", "spatstat.utils", "stringi", "tibble", "TTR", "xts", "yaml", "zoo"))
install.packages("'xm12'")
install.packages("installr");library(installr)
updateR()
install.packages('xm12')
install.packages('xm12')
install.packages('xml2')
install.packages('tidyverse')
install.packages('rvest')
library(rvest)
library(xml2)
library(rvest)
knitr::opts_chunk$set(echo = TRUE)
titanic = read.csv("titanic.csv")
dird = "C:\\Users\\MJYuh\\Documents\\OU 2017-2018\\Spring 2018\\ECON 5043\\HW 1"
setwd(dird)
set.seed(123456)
titanic = read.csv("titanic.csv")
tit_table = table(titanic$Survived, titanic$Pclass)
tit_table
prop.table(tit_table)
addmargins(prop.table(tit_table))
library(vcd)
install.packages("vcd")
library(vcd)
mosaic(tit_table, shade = TRUE, legend = TRUE)
prop.table(tit_table)
mosaic(tit_table, shade = TRUE, legend = TRUE)
prop.table(tit_table)
mosaic(tit_table, shade=TRUE, legend=TRUE)
tbl = structable(tit_table)
mosaic(tit_table, shade=TRUE, legend=TRUE)
mosaic(tbl), shade=TRUE, legend=TRUE)
mosaic(tbl, shade=TRUE, legend=TRUE)
tit_table
addmargins(prop.table(tit_table))
addmargins(prop.table(tit_table))
0.242424+0.20650954
addmargins(prop.table(tit_table))
0.15263749+0.09764310
x = c(70,75,80)
y = c(30,32,34)
w = 100*x + 200 *y
70*100 + 30*200
knitr::opts_chunk$set(echo = TRUE)
dird = "C:\\Users\\MJYuh\\Documents\\OU 2017-2018\\Spring 2018\\ECON 5043\\HW 1"
setwd(dird)
set.seed(123456)
titanic = read.csv("titanic.csv")
library(vcd)
tit_table = table(titanic$Survived, titanic$Pclass)
tit_table
addmargins(prop.table(tit_table))
mosaic(tbl, shade=TRUE, legend=TRUE)
addmargins(prop.table(tit_table))
0.15263749+0.09764310
x = c(70,75,80)
y = c(30,32,34)
w = 100*x + 200 *y
tbl = structable(tit_table)
library(rvest)
library(xml2)
library(rvest)
webpage <- read_html("https://www.nytimes.com/interactive/2017/06/23/opinion/trumps-lies.html")
webpage
install.packages("dplyr")
install.packages("magrittr")
install.packages("stringr")
install.packages("readr")
library(xml2)
library(rvest)
webpage <- read_html("https://www.privateislandsonline.com/search?availability=sale&region=&q2=&type%5Bprivate_island%5D=1&q=&lifestyles%5Bocean_island%5D=1&price_range=0%3A50000000&size_range=0%3A1000&view%5Bmap%5D=0")
webpage
results = html_nodes(webpage, ".short-desc")
results
name = html_nodes(webpage, ".list-name a")
name
webpage = read_html("https://www.privateislandsonline.com/search?availability=sale&region=&q2=&type%5Bprivate_island%5D=1&q=&lifestyles%5Bocean_island%5D=1&price_range=0%3A50000000&size_range=0%3A1000&view%5Bmap%5D=0")
webpage
name = html_nodes(webpage, ".list-name a")
name
name = html_nodes(webpage, ".list-name")
name
price = html_nodes(webpage, ".list-price")
size = html_nodes(webpage, ".text-center")
name = html_nodes(webpage, ".list-name")
price = html_nodes(webpage, ".list-price")
webpage = read_html("https://www.privateislandsonline.com/search?availability=sale&region=&q2=&type%5Bprivate_island%5D=1&q=&lifestyles%5Bocean_island%5D=1&price_range=0%3A50000000&size_range=0%3A1000&view%5Bmap%5D=0")
name = html_nodes(webpage, ".list-name")
price = html_nodes(webpage, ".list-price")
size = html_nodes(webpage, ".text-center")
webpage = read_html("https://www.privateislandsonline.com/search?availability=sale")
name = html_nodes(webpage, ".list-name")
price = html_nodes(webpage, ".list-price")
size = html_nodes(webpage, "#images .text-center")
place = html_nodes(webpage, ".list-name")
name = html_nodes(webpage, ".name")
name
install.packages("RSelenium")
library(RSelenium)
library(rvest)
checkForServer()
startServer()
webpage = read_html("https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees")
library(xml2)
library(rvest)
webpage = read_html("https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees")
year = html_nodes(webpage, ".jquery-tablesorter:nth-child(11) td")
artist = html_nodes(webpage, "td~ td+ td .fn a")
indutor = html_nodes(webpage, "#images .text-center")
inductor = html_nodes(webpage, "p+ .jquery-tablesorter a")
artist = html_nodes(webpage, "td~ td+ td .fn a")
inductor = html_nodes(webpage, "p+ .jquery-tablesorter a")
webpage = read_html("https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees")
year = html_nodes(webpage, ".jquery-tablesorter:nth-child(11) td")
artist = html_nodes(webpage, "td~ td+ td .fn a")
inductor = html_nodes(webpage, "p+ .jquery-tablesorter a")
year = html_nodes(webpage, ".jquery-tablesorter")
year = html_nodes(webpage, ".jquery-tablesorter:nth-child(11) td:nth-child(1)")
table = html_table(html_nodes(webpage, xpath='//*[@id="mw-content-text"]/div/table[1]'))
table
head(table)
table = html_nodes(webpage, xpath='//*[@id="mw-content-text"]/div/table[1]')
head(table)
library(magrittr)
table = webpage %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
head(table)
table = table[1]
head(table)
table = webpage %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
head(table)
library(xml2)
library(rvest)
library(magrittr)
webpage = read_html("https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees")
table = webpage %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
url = "https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees"
table = url %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
table = table[1]
head(table)
table
table = url %>% html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
table = url %>% read_html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
head(table)
table = table[1]
head(table)
table = url %>% read_html() %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div/table[1]') %>%
html_table()
data = table[1]
install.packages("XML")
library(XML)
url = "https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees"
readHTMLTable(url, which=1)
library(rvest)
library(xml2)
library(rvest)
url = "https://en.wikipedia.org/wiki/List_of_Rock_and_Roll_Hall_of_Fame_inductees"
readHTMLTable(url, which=1)
knitr::opts_chunk$set(echo = TRUE)
dird = "C:\\Users\\MJYuh\\Documents\\OU 2017-2018\\Spring 2018\\ECON 5043\\HW 3"
dird = "C:\\Users\\MJYuh\\Documents\\OU 2017-2018\\Spring 2018\\ECON 5043\\HW 3"
setwd(dird)
set.seed(123456)
titanic = read.csv("titanic.csv")
head(titanic)
summary(titanic)
ti_table = table(Survived = titanic$Survived, Sex = titanic$Sex, Class = titanic$Pclass)
ti_joint = prop.table(ti_table)
ti_joint
ti_margin = addmargins(prop.table(ti_joint))
ti_margin
ptheta.15 = 0.3
ptheta.25 = 0.2
ptheta.5 = 0.3
ptheta.75 = 0.2
p_t.15 = ptheta.15^9*(1-ptheta.15)^3
p_t.25 = ptheta.25^9*(1-ptheta.25)^3
p_t.15 = ptheta.5^9*(1-ptheta.5)^3
p_t.15 = ptheta.75^9*(1-ptheta.75)^3
p_t.15
p_t.25
p_t.5
p_t.15 = ptheta.15^9*(1-ptheta.15)^3
p_t.25 = ptheta.25^9*(1-ptheta.25)^3
p_t.5 = ptheta.5^9*(1-ptheta.5)^3
p_t.15 = ptheta.75^9*(1-ptheta.75)^3
p_t.15
p_t.25
p_t.5
p_t.75
p_t.15 = ptheta.15^9*(1-ptheta.15)^3
p_t.25 = ptheta.25^9*(1-ptheta.25)^3
p_t.5 = ptheta.5^9*(1-ptheta.5)^3
p_t.75 = ptheta.75^9*(1-ptheta.75)^3
p_t.15
p_t.25
p_t.5
p_t.75
f.x1 = p_t.15*.3
f.x2 = p_t.25*.2
f.x3 = p_t.5*.3
f.x4 = p_t.75*.2
f.x = f.x1+f.x2+f.x3+f.x4
list(f.x1, f.x2, f.x3, f.x4, f.x)
a = f.x1/f.x
b = f.x2/f.x
c = f.x3/f.x
d = f.x4/f.x
list(a,b,c,d)
sum(a,b,c,d)
sum(a,b,c,d)
a = f.x1/f.x
b = f.x2/f.x
c = f.x3/f.x
d = f.x4/f.x
list(a,b,c,d)
sum(a,b,c,d)
dird = "C://Users//MJYuh//DScourseS18//Problem Sets//PS10"
setwd(dird)
library(mlr)
library(rpart)
library(e1071)
library(kknn)
set.seed(100)
library(nnet)
income <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data")
names(income) <- c("age","workclass","fnlwgt","education","education.num","marital.status","occupation","relationship","race","sex","capital.gain","capital.loss","hours","native.country","high.earner")
income$native.country <- NULL
income$fnlwgt         <- NULL
income$age            <- as.numeric(income$age)
income$hours          <- as.numeric(income$hours)
income$education.num  <- as.numeric(income$education.num)
income$capital.gain   <- as.numeric(income$capital.gain)
income$capital.loss   <- as.numeric(income$capital.loss)
levels(income$education) <- list(Advanced = c("Masters,","Doctorate,","Prof-school,"), Bachelors = c("Bachelors,"), "Some-college" = c("Some-college,","Assoc-acdm,","Assoc-voc,"), "HS-grad" = c("HS-grad,","12th,"), "HS-drop" = c("11th,","9th,","7th-8th,","1st-4th,","10th,","5th-6th,","Preschool,"))
levels(income$marital.status) <- list(Married = c("Married-civ-spouse,","Married-spouse-absent,","Married-AF-spouse,"), Divorced = c("Divorced,","Separated,"), Widowed = c("Widowed,"), "Never-married" = c("Never-married,"))
levels(income$race) <- list(White = c("White,"), Black = c("Black,"), Asian = c("Asian-Pac-Islander,"), Other = c("Other,","Amer-Indian-Eskimo,"))
levels(income$workclass) <- list(Private = c("Private,"), "Self-emp" = c("Self-emp-not-inc,","Self-emp-inc,"), Gov = c("Federal-gov,","Local-gov,","State-gov,"), Other = c("Without-pay,","Never-worked,","?,"))
levels(income$occupation) <- list("Blue-collar" = c("?,","Craft-repair,","Farming-fishing,","Handlers-cleaners,","Machine-op-inspct,","Transport-moving,"), "White-collar" = c("Adm-clerical,","Exec-managerial,","Prof-specialty,","Sales,","Tech-support,"), Services = c("Armed-Forces,","Other-service,","Priv-house-serv,","Protective-serv,"))
n <- nrow(income)
train <- sample(n, size = .8*n)
test  <- setdiff(1:n, train)
income.train <- income[train,]
income.test  <- income[test, ]
theTask <- makeClassifTask(id = "taskname", data = income.train, target = "high.earner")
pred.tree <- makeLearner("classif.rpart", predict.type = "response")
pred.logic <- makeLearner("classif.glmnet", predict.type = "response")
pred.neural <- makeLearner("classif.nnet", predict.type = "response")
pred.nayes <- makeLearner("classif.naiveBayes", predict.type = "response")
pred.kknn <- makeLearner("classif.kknn", predict.type = "response")
pred.svm <- makeLearner("classif.svm", predict.type = "response")
resamplestrat <- makeResampleDesc(method = "CV", iters = 3)
tunemethod <- makeTuneControlRandom(maxit = 10L)
param_tree<- makeParamSet(
makeIntegerParam("minsplit",lower = 10, upper = 50),
makeIntegerParam("minbucket", lower = 5, upper = 50),
makeNumericParam("cp", lower = 0.001, upper = 0.2))
param_regression <- makeParamSet(makeNumericParam("lambda",lower=0,upper=3),
makeNumericParam("alpha",lower=0,upper=1))
param_neural<- makeParamSet(makeIntegerParam("size", lower = 1,upper = 10),
makeNumericParam("decay",lower = 0.1,upper = 0.5),
makeIntegerParam("maxit",lower = 1000,upper = 1000))
param_kknn<-makeParamSet(makeIntegerParam("k", lower = 1,upper = 30))
param_svm<- makeParamSet(makeDiscreteParam("cost", values = 2^c(-2,-1, 0, 1, 2, 10)),
makeDiscreteParam("gamma", values = 2^c(-2,-1, 0, 1, 2, 10)))
tunedmodel_tree <- tuneParams(learner = pred.tree,
task = theTask,
resampling = resamplestrat,
measures =list(f1,gmean),
par.set = param_tree,
control = tunemethod,
show.info = TRUE)
tunedmodel_logic<- tuneParams(learner = pred.logic,
task = theTask,
resampling = resamplestrat,
measures = list(f1,gmean),
par.set = param_regression,
control = tunemethod,
show.info = TRUE)
tunedmodel_neural<-tuneParams(learner = pred.neural,
task = theTask,
resampling = resamplestrat,
measures = list(f1,gmean),
par.set = param_neural,
control = tunemethod,
show.info = TRUE)
tunedmodel_kknn<-tuneParams(learner = pred.kknn,
task = theTask,
resampling = resamplestrat,
measures = list(f1,gmean),
par.set = param_kknn,
control = tunemethod,
show.info = TRUE)
tunedmodel_svm<-tuneParams(learner = pred.svm,
task = theTask,
resampling = resamplestrat,
measures = list(f1,gmean),
par.set = param_svm,
control = tunemethod,
show.info = TRUE)
tunedmodel_svm<-tuneParams(learner = pred.svm,
task = theTask,
resampling = resamplestrat,
measures = list(f1,gmean),
par.set = param_svm,
control = tunemethod,
show.info = TRUE)
pred.tree<-setHyperPars(learner = pred.tree,par.vals = tunedmodel_tree$x)
pred.logic<-setHyperPars(learner = pred.logic,par.vals = tunedmodel_logic$x)
pred.neural<-setHyperPars(learner = pred.neural,par.vals = tunedmodel_neural$x)
pred.kknn<-setHyperPars(learner = pred.kknn,par.vals = tunedmodel_kknn$x)
pred.svm<-setHyperPars(learner = pred.svm,par.vals = tunedmodel_svm$x)
performance.tree<-resample(pred.tree,theTask,resamplestrat,measures=list(f1,gmean))
performance.logic<-resample(pred.logic,theTask,resamplestrat,measures=list(f1,gmean))
performance.neural<-resample(pred.neural,theTask,resamplestrat,measures=list(f1,gmean))
performance.logic<-resample(pred.logic,theTask,resamplestrat,measures=list(f1,gmean))
performance.kknn<-resample(pred.kknn,theTask,resamplestrat,measures=list(f1,gmean))
performance.svm<-resample(pred.svm,theTask,resamplestrat,measures=list(f1,gmean))
performance.bayes<-resample(pred.Bayes,theTask,resamplestrat,measures = list(f1,gmean))
performance.bayes<-resample(pred.bayes,theTask,resamplestrat,measures = list(f1,gmean))
pred.bayes <- makeLearner("classif.naiveBayes", predict.type = "response")
finalModel.bayes<-train(learner=pred.bayes,task=theTask)
performance.bayes<-resample(pred.bayes,theTask,resamplestrat,measures = list(f1,gmean))
finalModel.tree <- train(learner = pred.tree, task = theTask)
finalModel.logic<-train(learner=pred.logic,task=theTask)
finalModel.neural<-train(learner=pred.neural,task=theTask)
finalModel.tree <- train(learner = pred.tree, task = theTask)
finalModel.kknn<-train(learner=pred.kknn,task=theTask)
finalModel.svm<-train(learner=pred.svm,task=theTask)
finalModel.bayes<-train(learner=pred.bayes,task=theTask)
prediction.tree <- predict(finalModel.tree, newdata = income.test)
prediction.logic<-predict(finalModel.logic,newdata=income.test)
prediction.neural<-predict(finalModel.neural,newdata=income.test)
prediction.kknn<-predict(finalModel.kknn,newdata=income.test)
prediction.svm<-predict(finalModel.svm,newdata=income.test)
prediction.bayes<-predict(finalModel.bayes,newdata=income.test)
prediction.tree
tunedmodel_tree <- tuneParams(learner = pred.tree,
task = theTask,
resampling = resamplestrat,
measures =list(f1,gmean),
par.set = param_tree,
control = tunemethod,
show.info = TRUE)
tunedmodel_logic<- tuneParams(learner = pred.logic,
task = theTask,
resampling = resamplestrat,
measures = list(f1,gmean),
par.set = param_regression,
control = tunemethod,
show.info = TRUE)
tunedmodel_neural<-tuneParams(learner = pred.neural,
task = theTask,
resampling = resamplestrat,
measures = list(f1,gmean),
par.set = param_neural,
control = tunemethod,
show.info = TRUE)
performance(prediction.tree, measures = list(f1, gmean))
performance(prediction.logic, measures = list(f1, gmean))
performance(prediction.neural, measures = list(f1, gmean))
performance(prediction.KKNN, measures = list(f1, gmean))
performance(prediction.svm, measures = list(f1, gmean))
performance(prediction.Bayes, measures = list(f1, gmean))
performance(prediction.tree, measures = list(f1, gmean))
performance(prediction.logic, measures = list(f1, gmean))
performance(prediction.neural, measures = list(f1, gmean))
performance(prediction.kknn, measures = list(f1, gmean))
performance(prediction.svm, measures = list(f1, gmean))
performance(prediction.bayes, measures = list(f1, gmean))
